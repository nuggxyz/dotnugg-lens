/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface NuggftV1Interface extends utils.Interface {
  contractName: "NuggftV1";
  functions: {
    "REBALANCE_FEE_BPS()": FunctionFragment;
    "agency(uint24)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balance(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint24)": FunctionFragment;
    "bye()": FunctionFragment;
    "check(address,uint24)": FunctionFragment;
    "claim(uint24[],address[],uint24[],uint16[])": FunctionFragment;
    "debt(uint24)": FunctionFragment;
    "dotnuggv1()": FunctionFragment;
    "early()": FunctionFragment;
    "epoch()": FunctionFragment;
    "eps()": FunctionFragment;
    "extract()": FunctionFragment;
    "floop(uint24)": FunctionFragment;
    "genesis()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "image123(uint256,bool,uint8,bytes)": FunctionFragment;
    "imageSVG(uint256)": FunctionFragment;
    "imageURI(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isTrusted(address)": FunctionFragment;
    "itemAgency(uint24,uint16)": FunctionFragment;
    "itemOffers(uint24,uint24,uint16)": FunctionFragment;
    "lastItemSwap(uint16)": FunctionFragment;
    "liquidate(uint24)": FunctionFragment;
    "loan(uint24[])": FunctionFragment;
    "migrate(uint24)": FunctionFragment;
    "migrator()": FunctionFragment;
    "mint(uint24)": FunctionFragment;
    "mintTokens()": FunctionFragment;
    "msp()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "name()": FunctionFragment;
    "offer(uint24,uint24,uint16)": FunctionFragment;
    "offers(uint24,address)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "premintTokens()": FunctionFragment;
    "proof(uint24)": FunctionFragment;
    "proofOf(uint24)": FunctionFragment;
    "proto()": FunctionFragment;
    "rebalance(uint24[])": FunctionFragment;
    "rotate(uint24,uint8[],uint8[])": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "sell(uint24,uint96)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setIsTrusted(address,bool)": FunctionFragment;
    "setMigrator(address)": FunctionFragment;
    "shares()": FunctionFragment;
    "stake()": FunctionFragment;
    "staked()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "trustedMint(uint24,address)": FunctionFragment;
    "trustedMintTokens()": FunctionFragment;
    "vfl(uint24[])": FunctionFragment;
    "vfo(uint24,uint24,uint16)": FunctionFragment;
    "vfr(uint24[])": FunctionFragment;
    "xnuggftv1()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "REBALANCE_FEE_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "agency",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balance", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "bye", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "check",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish[], string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "debt", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "dotnuggv1", values?: undefined): string;
  encodeFunctionData(functionFragment: "early", values?: undefined): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(functionFragment: "eps", values?: undefined): string;
  encodeFunctionData(functionFragment: "extract", values?: undefined): string;
  encodeFunctionData(functionFragment: "floop", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "genesis", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "image123",
    values: [BigNumberish, boolean, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "imageSVG",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "imageURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "isTrusted", values: [string]): string;
  encodeFunctionData(
    functionFragment: "itemAgency",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "itemOffers",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastItemSwap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loan",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "migrator", values?: undefined): string;
  encodeFunctionData(functionFragment: "mint", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "mintTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "msp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "offer",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "premintTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "proof", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "proofOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "proto", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "rotate",
    values: [BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsTrusted",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setMigrator", values: [string]): string;
  encodeFunctionData(functionFragment: "shares", values?: undefined): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(functionFragment: "staked", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedMint",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedMintTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vfl", values: [BigNumberish[]]): string;
  encodeFunctionData(
    functionFragment: "vfo",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vfr", values: [BigNumberish[]]): string;
  encodeFunctionData(functionFragment: "xnuggftv1", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "REBALANCE_FEE_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "agency", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bye", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "debt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dotnuggv1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "early", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "extract", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "floop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "genesis", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "image123", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "imageSVG", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "imageURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isTrusted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "itemAgency", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "itemOffers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastItemSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "msp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "premintTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proof", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proofOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proto", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rotate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsTrusted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMigrator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "staked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedMintTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vfl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vfr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xnuggftv1", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Burn(uint24,address,uint96)": EventFragment;
    "Claim(uint24,address)": EventFragment;
    "ClaimItem(uint24,uint16,uint24,bytes32)": EventFragment;
    "Extract(uint96)": EventFragment;
    "Genesis(uint256,uint32,uint24,uint8,uint24,address,address,bytes32)": EventFragment;
    "Liquidate(uint24,bytes32)": EventFragment;
    "Loan(uint24,bytes32)": EventFragment;
    "MigrateV1Sent(address,uint24,bytes32,address,uint96)": EventFragment;
    "MigratorV1Updated(address)": EventFragment;
    "Mint(uint24,uint96,bytes32,bytes32,bytes32)": EventFragment;
    "Offer(uint24,bytes32,bytes32)": EventFragment;
    "OfferItem(uint24,uint16,bytes32,bytes32)": EventFragment;
    "OfferMint(uint24,bytes32,bytes32,bytes32)": EventFragment;
    "PreMint(uint24,bytes32,bytes32,uint16,bytes32)": EventFragment;
    "Rebalance(uint24,bytes32)": EventFragment;
    "Rotate(uint24,bytes32)": EventFragment;
    "Sell(uint24,bytes32)": EventFragment;
    "SellItem(uint24,uint16,bytes32,bytes32)": EventFragment;
    "Stake(bytes32)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TrustUpdated(address,bool)": EventFragment;
    "UserTrustUpdated(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Extract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Genesis"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Loan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigrateV1Sent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MigratorV1Updated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Offer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PreMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rebalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rotate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellItem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TrustUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserTrustUpdated"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { _owner: string; _approved: string; _tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { _owner: string; _operator: string; _approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type BurnEvent = TypedEvent<
  [number, string, BigNumber],
  { tokenId: number; owner: string; ethOwed: BigNumber }
>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export type ClaimEvent = TypedEvent<
  [number, string],
  { tokenId: number; account: string }
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export type ClaimItemEvent = TypedEvent<
  [number, number, number, string],
  {
    sellingTokenId: number;
    itemId: number;
    buyerTokenId: number;
    proof: string;
  }
>;

export type ClaimItemEventFilter = TypedEventFilter<ClaimItemEvent>;

export type ExtractEvent = TypedEvent<[BigNumber], { eth: BigNumber }>;

export type ExtractEventFilter = TypedEventFilter<ExtractEvent>;

export type GenesisEvent = TypedEvent<
  [BigNumber, number, number, number, number, string, string, string],
  {
    blocknum: BigNumber;
    interval: number;
    offset: number;
    intervalOffset: number;
    early: number;
    dotnugg: string;
    xnuggftv1: string;
    stake: string;
  }
>;

export type GenesisEventFilter = TypedEventFilter<GenesisEvent>;

export type LiquidateEvent = TypedEvent<
  [number, string],
  { tokenId: number; agency: string }
>;

export type LiquidateEventFilter = TypedEventFilter<LiquidateEvent>;

export type LoanEvent = TypedEvent<
  [number, string],
  { tokenId: number; agency: string }
>;

export type LoanEventFilter = TypedEventFilter<LoanEvent>;

export type MigrateV1SentEvent = TypedEvent<
  [string, number, string, string, BigNumber],
  { v2: string; tokenId: number; proof: string; owner: string; eth: BigNumber }
>;

export type MigrateV1SentEventFilter = TypedEventFilter<MigrateV1SentEvent>;

export type MigratorV1UpdatedEvent = TypedEvent<[string], { migrator: string }>;

export type MigratorV1UpdatedEventFilter =
  TypedEventFilter<MigratorV1UpdatedEvent>;

export type MintEvent = TypedEvent<
  [number, BigNumber, string, string, string],
  {
    tokenId: number;
    value: BigNumber;
    proof: string;
    stake: string;
    agency: string;
  }
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export type OfferEvent = TypedEvent<
  [number, string, string],
  { tokenId: number; agency: string; stake: string }
>;

export type OfferEventFilter = TypedEventFilter<OfferEvent>;

export type OfferItemEvent = TypedEvent<
  [number, number, string, string],
  { sellingTokenId: number; itemId: number; agency: string; stake: string }
>;

export type OfferItemEventFilter = TypedEventFilter<OfferItemEvent>;

export type OfferMintEvent = TypedEvent<
  [number, string, string, string],
  { tokenId: number; agency: string; proof: string; stake: string }
>;

export type OfferMintEventFilter = TypedEventFilter<OfferMintEvent>;

export type PreMintEvent = TypedEvent<
  [number, string, string, number, string],
  {
    tokenId: number;
    proof: string;
    nuggAgency: string;
    itemId: number;
    itemAgency: string;
  }
>;

export type PreMintEventFilter = TypedEventFilter<PreMintEvent>;

export type RebalanceEvent = TypedEvent<
  [number, string],
  { tokenId: number; agency: string }
>;

export type RebalanceEventFilter = TypedEventFilter<RebalanceEvent>;

export type RotateEvent = TypedEvent<
  [number, string],
  { tokenId: number; proof: string }
>;

export type RotateEventFilter = TypedEventFilter<RotateEvent>;

export type SellEvent = TypedEvent<
  [number, string],
  { tokenId: number; agency: string }
>;

export type SellEventFilter = TypedEventFilter<SellEvent>;

export type SellItemEvent = TypedEvent<
  [number, number, string, string],
  { sellingTokenId: number; itemId: number; agency: string; proof: string }
>;

export type SellItemEventFilter = TypedEventFilter<SellItemEvent>;

export type StakeEvent = TypedEvent<[string], { stake: string }>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { _from: string; _to: string; _tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type TrustUpdatedEvent = TypedEvent<
  [string, boolean],
  { user: string; trust: boolean }
>;

export type TrustUpdatedEventFilter = TypedEventFilter<TrustUpdatedEvent>;

export type UserTrustUpdatedEvent = TypedEvent<
  [string, boolean],
  { user: string; trusted: boolean }
>;

export type UserTrustUpdatedEventFilter =
  TypedEventFilter<UserTrustUpdatedEvent>;

export interface NuggftV1 extends BaseContract {
  contractName: "NuggftV1";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NuggftV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    REBALANCE_FEE_BPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    agency(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(
      you: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { acc: BigNumber }>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bye(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "check(address,uint24)"(
      sender: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        canOffer: boolean;
        next: BigNumber;
        currentUserOffer: BigNumber;
        currentLeaderOffer: BigNumber;
        incrementBps: BigNumber;
      }
    >;

    "check(uint24,uint24,uint16)"(
      buyer: BigNumberish,
      seller: BigNumberish,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        canOffer: boolean;
        next: BigNumber;
        currentUserOffer: BigNumber;
        currentLeaderOffer: BigNumber;
        incrementBps: BigNumber;
        mustClaimBuyer: boolean;
        mustOfferOnSeller: boolean;
      }
    >;

    claim(
      tokenIds: BigNumberish[],
      accounts: string[],
      buyingTokenIds: BigNumberish[],
      itemIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    debt(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, BigNumber, number] & {
        isLoaned: boolean;
        account: string;
        prin: BigNumber;
        fee: BigNumber;
        earn: BigNumber;
        expire: number;
      }
    >;

    dotnuggv1(overrides?: CallOverrides): Promise<[string]>;

    early(overrides?: CallOverrides): Promise<[number]>;

    epoch(overrides?: CallOverrides): Promise<[number] & { res: number }>;

    eps(overrides?: CallOverrides): Promise<[BigNumber] & { res: BigNumber }>;

    extract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    floop(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number[]] & { arr: number[] }>;

    genesis(overrides?: CallOverrides): Promise<[BigNumber]>;

    getApproved(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    image123(
      tokenId: BigNumberish,
      base64: boolean,
      chunk: BigNumberish,
      prev: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { res: string }>;

    imageSVG(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { res: string }>;

    imageURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { res: string }>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrusted(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    itemAgency(
      sellingTokenId: BigNumberish,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    itemOffers(
      buyingTokenid: BigNumberish,
      sellingTokenId: BigNumberish,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    lastItemSwap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidate(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    loan(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrate(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrator(overrides?: CallOverrides): Promise<[string]>;

    mint(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintTokens(
      overrides?: CallOverrides
    ): Promise<[number, number] & { first: number; last: number }>;

    msp(overrides?: CallOverrides): Promise<[BigNumber] & { res: BigNumber }>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "offer(uint24,uint24,uint16)"(
      buyingTokenId: BigNumberish,
      sellingTokenId: BigNumberish,
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "offer(uint24,uint24,uint16,uint96,uint96)"(
      buyingTokenId: BigNumberish,
      sellingTokenId: BigNumberish,
      itemId: BigNumberish,
      offerValue1: BigNumberish,
      offerValue2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "offer(uint24)"(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    offers(
      tokenId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { res: string }>;

    premintTokens(
      overrides?: CallOverrides
    ): Promise<[number, number] & { first: number; last: number }>;

    proof(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    proofOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { res: BigNumber }>;

    proto(overrides?: CallOverrides): Promise<[BigNumber] & { res: BigNumber }>;

    rebalance(
      tokenIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rotate(
      tokenId: BigNumberish,
      index0s: BigNumberish[],
      index1s: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sell(uint24,uint96)"(
      tokenId: BigNumberish,
      floor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "sell(uint24,uint16,uint96)"(
      sellingTokenId: BigNumberish,
      itemId: BigNumberish,
      floor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      arg0: string,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<[void]>;

    setIsTrusted(
      user: string,
      trusted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMigrator(
      _migrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shares(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { res: BigNumber }>;

    stake(overrides?: CallOverrides): Promise<[BigNumber]>;

    staked(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { res: BigNumber }>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { res: string }>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { res: BigNumber }>;

    transferFrom(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trustedMint(
      tokenId: BigNumberish,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trustedMintTokens(
      overrides?: CallOverrides
    ): Promise<[number, number] & { first: number; last: number }>;

    vfl(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { vals: BigNumber[] }>;

    "vfo(uint24,uint24,uint16)"(
      buyer: BigNumberish,
      seller: BigNumberish,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { res: BigNumber }>;

    "vfo(address,uint24)"(
      sender: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { res: BigNumber }>;

    vfr(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { vals: BigNumber[] }>;

    xnuggftv1(overrides?: CallOverrides): Promise<[string]>;
  };

  REBALANCE_FEE_BPS(overrides?: CallOverrides): Promise<BigNumber>;

  agency(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    arg0: string,
    arg1: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(you: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bye(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "check(address,uint24)"(
    sender: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
      canOffer: boolean;
      next: BigNumber;
      currentUserOffer: BigNumber;
      currentLeaderOffer: BigNumber;
      incrementBps: BigNumber;
    }
  >;

  "check(uint24,uint24,uint16)"(
    buyer: BigNumberish,
    seller: BigNumberish,
    itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber, boolean, boolean] & {
      canOffer: boolean;
      next: BigNumber;
      currentUserOffer: BigNumber;
      currentLeaderOffer: BigNumber;
      incrementBps: BigNumber;
      mustClaimBuyer: boolean;
      mustOfferOnSeller: boolean;
    }
  >;

  claim(
    tokenIds: BigNumberish[],
    accounts: string[],
    buyingTokenIds: BigNumberish[],
    itemIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  debt(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, BigNumber, BigNumber, number] & {
      isLoaned: boolean;
      account: string;
      prin: BigNumber;
      fee: BigNumber;
      earn: BigNumber;
      expire: number;
    }
  >;

  dotnuggv1(overrides?: CallOverrides): Promise<string>;

  early(overrides?: CallOverrides): Promise<number>;

  epoch(overrides?: CallOverrides): Promise<number>;

  eps(overrides?: CallOverrides): Promise<BigNumber>;

  extract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  floop(tokenId: BigNumberish, overrides?: CallOverrides): Promise<number[]>;

  genesis(overrides?: CallOverrides): Promise<BigNumber>;

  getApproved(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  image123(
    tokenId: BigNumberish,
    base64: boolean,
    chunk: BigNumberish,
    prev: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  imageSVG(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  imageURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  isApprovedForAll(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrusted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  itemAgency(
    sellingTokenId: BigNumberish,
    itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  itemOffers(
    buyingTokenid: BigNumberish,
    sellingTokenId: BigNumberish,
    itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastItemSwap(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidate(
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  loan(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrate(
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrator(overrides?: CallOverrides): Promise<string>;

  mint(
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintTokens(
    overrides?: CallOverrides
  ): Promise<[number, number] & { first: number; last: number }>;

  msp(overrides?: CallOverrides): Promise<BigNumber>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "offer(uint24,uint24,uint16)"(
    buyingTokenId: BigNumberish,
    sellingTokenId: BigNumberish,
    itemId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "offer(uint24,uint24,uint16,uint96,uint96)"(
    buyingTokenId: BigNumberish,
    sellingTokenId: BigNumberish,
    itemId: BigNumberish,
    offerValue1: BigNumberish,
    offerValue2: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "offer(uint24)"(
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  offers(
    tokenId: BigNumberish,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  premintTokens(
    overrides?: CallOverrides
  ): Promise<[number, number] & { first: number; last: number }>;

  proof(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  proofOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  proto(overrides?: CallOverrides): Promise<BigNumber>;

  rebalance(
    tokenIds: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rotate(
    tokenId: BigNumberish,
    index0s: BigNumberish[],
    index1s: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sell(uint24,uint96)"(
    tokenId: BigNumberish,
    floor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "sell(uint24,uint16,uint96)"(
    sellingTokenId: BigNumberish,
    itemId: BigNumberish,
    floor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    arg0: string,
    arg1: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  setIsTrusted(
    user: string,
    trusted: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMigrator(
    _migrator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shares(overrides?: CallOverrides): Promise<BigNumber>;

  stake(overrides?: CallOverrides): Promise<BigNumber>;

  staked(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trustedMint(
    tokenId: BigNumberish,
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trustedMintTokens(
    overrides?: CallOverrides
  ): Promise<[number, number] & { first: number; last: number }>;

  vfl(
    tokenIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "vfo(uint24,uint24,uint16)"(
    buyer: BigNumberish,
    seller: BigNumberish,
    itemId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "vfo(address,uint24)"(
    sender: string,
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vfr(
    tokenIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  xnuggftv1(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    REBALANCE_FEE_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    agency(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(you: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    bye(overrides?: CallOverrides): Promise<void>;

    "check(address,uint24)"(
      sender: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber] & {
        canOffer: boolean;
        next: BigNumber;
        currentUserOffer: BigNumber;
        currentLeaderOffer: BigNumber;
        incrementBps: BigNumber;
      }
    >;

    "check(uint24,uint24,uint16)"(
      buyer: BigNumberish,
      seller: BigNumberish,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean
      ] & {
        canOffer: boolean;
        next: BigNumber;
        currentUserOffer: BigNumber;
        currentLeaderOffer: BigNumber;
        incrementBps: BigNumber;
        mustClaimBuyer: boolean;
        mustOfferOnSeller: boolean;
      }
    >;

    claim(
      tokenIds: BigNumberish[],
      accounts: string[],
      buyingTokenIds: BigNumberish[],
      itemIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    debt(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, BigNumber, number] & {
        isLoaned: boolean;
        account: string;
        prin: BigNumber;
        fee: BigNumber;
        earn: BigNumber;
        expire: number;
      }
    >;

    dotnuggv1(overrides?: CallOverrides): Promise<string>;

    early(overrides?: CallOverrides): Promise<number>;

    epoch(overrides?: CallOverrides): Promise<number>;

    eps(overrides?: CallOverrides): Promise<BigNumber>;

    extract(overrides?: CallOverrides): Promise<void>;

    floop(tokenId: BigNumberish, overrides?: CallOverrides): Promise<number[]>;

    genesis(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    image123(
      tokenId: BigNumberish,
      base64: boolean,
      chunk: BigNumberish,
      prev: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    imageSVG(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    imageURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrusted(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    itemAgency(
      sellingTokenId: BigNumberish,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemOffers(
      buyingTokenid: BigNumberish,
      sellingTokenId: BigNumberish,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastItemSwap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    loan(tokenIds: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    migrate(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    migrator(overrides?: CallOverrides): Promise<string>;

    mint(tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    mintTokens(
      overrides?: CallOverrides
    ): Promise<[number, number] & { first: number; last: number }>;

    msp(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "offer(uint24,uint24,uint16)"(
      buyingTokenId: BigNumberish,
      sellingTokenId: BigNumberish,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "offer(uint24,uint24,uint16,uint96,uint96)"(
      buyingTokenId: BigNumberish,
      sellingTokenId: BigNumberish,
      itemId: BigNumberish,
      offerValue1: BigNumberish,
      offerValue2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "offer(uint24)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    offers(
      tokenId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    premintTokens(
      overrides?: CallOverrides
    ): Promise<[number, number] & { first: number; last: number }>;

    proof(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    proofOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proto(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    rotate(
      tokenId: BigNumberish,
      index0s: BigNumberish[],
      index1s: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "sell(uint24,uint96)"(
      tokenId: BigNumberish,
      floor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "sell(uint24,uint16,uint96)"(
      sellingTokenId: BigNumberish,
      itemId: BigNumberish,
      floor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      arg0: string,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsTrusted(
      user: string,
      trusted: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMigrator(_migrator: string, overrides?: CallOverrides): Promise<void>;

    shares(overrides?: CallOverrides): Promise<BigNumber>;

    stake(overrides?: CallOverrides): Promise<BigNumber>;

    staked(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedMint(
      tokenId: BigNumberish,
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedMintTokens(
      overrides?: CallOverrides
    ): Promise<[number, number] & { first: number; last: number }>;

    vfl(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "vfo(uint24,uint24,uint16)"(
      buyer: BigNumberish,
      seller: BigNumberish,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vfo(address,uint24)"(
      sender: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vfr(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    xnuggftv1(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      _owner?: string | null,
      _approved?: string | null,
      _tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      _owner?: string | null,
      _approved?: string | null,
      _tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      _owner?: string | null,
      _operator?: string | null,
      _approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      _owner?: string | null,
      _operator?: string | null,
      _approved?: null
    ): ApprovalForAllEventFilter;

    "Burn(uint24,address,uint96)"(
      tokenId?: null,
      owner?: null,
      ethOwed?: null
    ): BurnEventFilter;
    Burn(tokenId?: null, owner?: null, ethOwed?: null): BurnEventFilter;

    "Claim(uint24,address)"(
      tokenId?: BigNumberish | null,
      account?: string | null
    ): ClaimEventFilter;
    Claim(
      tokenId?: BigNumberish | null,
      account?: string | null
    ): ClaimEventFilter;

    "ClaimItem(uint24,uint16,uint24,bytes32)"(
      sellingTokenId?: BigNumberish | null,
      itemId?: BigNumberish | null,
      buyerTokenId?: BigNumberish | null,
      proof?: null
    ): ClaimItemEventFilter;
    ClaimItem(
      sellingTokenId?: BigNumberish | null,
      itemId?: BigNumberish | null,
      buyerTokenId?: BigNumberish | null,
      proof?: null
    ): ClaimItemEventFilter;

    "Extract(uint96)"(eth?: null): ExtractEventFilter;
    Extract(eth?: null): ExtractEventFilter;

    "Genesis(uint256,uint32,uint24,uint8,uint24,address,address,bytes32)"(
      blocknum?: null,
      interval?: null,
      offset?: null,
      intervalOffset?: null,
      early?: null,
      dotnugg?: null,
      xnuggftv1?: null,
      stake?: null
    ): GenesisEventFilter;
    Genesis(
      blocknum?: null,
      interval?: null,
      offset?: null,
      intervalOffset?: null,
      early?: null,
      dotnugg?: null,
      xnuggftv1?: null,
      stake?: null
    ): GenesisEventFilter;

    "Liquidate(uint24,bytes32)"(
      tokenId?: BigNumberish | null,
      agency?: null
    ): LiquidateEventFilter;
    Liquidate(
      tokenId?: BigNumberish | null,
      agency?: null
    ): LiquidateEventFilter;

    "Loan(uint24,bytes32)"(
      tokenId?: BigNumberish | null,
      agency?: null
    ): LoanEventFilter;
    Loan(tokenId?: BigNumberish | null, agency?: null): LoanEventFilter;

    "MigrateV1Sent(address,uint24,bytes32,address,uint96)"(
      v2?: null,
      tokenId?: null,
      proof?: null,
      owner?: null,
      eth?: null
    ): MigrateV1SentEventFilter;
    MigrateV1Sent(
      v2?: null,
      tokenId?: null,
      proof?: null,
      owner?: null,
      eth?: null
    ): MigrateV1SentEventFilter;

    "MigratorV1Updated(address)"(migrator?: null): MigratorV1UpdatedEventFilter;
    MigratorV1Updated(migrator?: null): MigratorV1UpdatedEventFilter;

    "Mint(uint24,uint96,bytes32,bytes32,bytes32)"(
      tokenId?: BigNumberish | null,
      value?: null,
      proof?: null,
      stake?: null,
      agency?: null
    ): MintEventFilter;
    Mint(
      tokenId?: BigNumberish | null,
      value?: null,
      proof?: null,
      stake?: null,
      agency?: null
    ): MintEventFilter;

    "Offer(uint24,bytes32,bytes32)"(
      tokenId?: BigNumberish | null,
      agency?: null,
      stake?: null
    ): OfferEventFilter;
    Offer(
      tokenId?: BigNumberish | null,
      agency?: null,
      stake?: null
    ): OfferEventFilter;

    "OfferItem(uint24,uint16,bytes32,bytes32)"(
      sellingTokenId?: BigNumberish | null,
      itemId?: BigNumberish | null,
      agency?: null,
      stake?: null
    ): OfferItemEventFilter;
    OfferItem(
      sellingTokenId?: BigNumberish | null,
      itemId?: BigNumberish | null,
      agency?: null,
      stake?: null
    ): OfferItemEventFilter;

    "OfferMint(uint24,bytes32,bytes32,bytes32)"(
      tokenId?: BigNumberish | null,
      agency?: null,
      proof?: null,
      stake?: null
    ): OfferMintEventFilter;
    OfferMint(
      tokenId?: BigNumberish | null,
      agency?: null,
      proof?: null,
      stake?: null
    ): OfferMintEventFilter;

    "PreMint(uint24,bytes32,bytes32,uint16,bytes32)"(
      tokenId?: BigNumberish | null,
      proof?: null,
      nuggAgency?: null,
      itemId?: BigNumberish | null,
      itemAgency?: null
    ): PreMintEventFilter;
    PreMint(
      tokenId?: BigNumberish | null,
      proof?: null,
      nuggAgency?: null,
      itemId?: BigNumberish | null,
      itemAgency?: null
    ): PreMintEventFilter;

    "Rebalance(uint24,bytes32)"(
      tokenId?: BigNumberish | null,
      agency?: null
    ): RebalanceEventFilter;
    Rebalance(
      tokenId?: BigNumberish | null,
      agency?: null
    ): RebalanceEventFilter;

    "Rotate(uint24,bytes32)"(
      tokenId?: BigNumberish | null,
      proof?: null
    ): RotateEventFilter;
    Rotate(tokenId?: BigNumberish | null, proof?: null): RotateEventFilter;

    "Sell(uint24,bytes32)"(
      tokenId?: BigNumberish | null,
      agency?: null
    ): SellEventFilter;
    Sell(tokenId?: BigNumberish | null, agency?: null): SellEventFilter;

    "SellItem(uint24,uint16,bytes32,bytes32)"(
      sellingTokenId?: BigNumberish | null,
      itemId?: BigNumberish | null,
      agency?: null,
      proof?: null
    ): SellItemEventFilter;
    SellItem(
      sellingTokenId?: BigNumberish | null,
      itemId?: BigNumberish | null,
      agency?: null,
      proof?: null
    ): SellItemEventFilter;

    "Stake(bytes32)"(stake?: null): StakeEventFilter;
    Stake(stake?: null): StakeEventFilter;

    "Transfer(address,address,uint256)"(
      _from?: string | null,
      _to?: string | null,
      _tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      _from?: string | null,
      _to?: string | null,
      _tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "TrustUpdated(address,bool)"(
      user?: string | null,
      trust?: null
    ): TrustUpdatedEventFilter;
    TrustUpdated(user?: string | null, trust?: null): TrustUpdatedEventFilter;

    "UserTrustUpdated(address,bool)"(
      user?: string | null,
      trusted?: null
    ): UserTrustUpdatedEventFilter;
    UserTrustUpdated(
      user?: string | null,
      trusted?: null
    ): UserTrustUpdatedEventFilter;
  };

  estimateGas: {
    REBALANCE_FEE_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    agency(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(you: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bye(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "check(address,uint24)"(
      sender: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "check(uint24,uint24,uint16)"(
      buyer: BigNumberish,
      seller: BigNumberish,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      tokenIds: BigNumberish[],
      accounts: string[],
      buyingTokenIds: BigNumberish[],
      itemIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    debt(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    dotnuggv1(overrides?: CallOverrides): Promise<BigNumber>;

    early(overrides?: CallOverrides): Promise<BigNumber>;

    epoch(overrides?: CallOverrides): Promise<BigNumber>;

    eps(overrides?: CallOverrides): Promise<BigNumber>;

    extract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    floop(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    genesis(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    image123(
      tokenId: BigNumberish,
      base64: boolean,
      chunk: BigNumberish,
      prev: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    imageSVG(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    imageURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrusted(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    itemAgency(
      sellingTokenId: BigNumberish,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    itemOffers(
      buyingTokenid: BigNumberish,
      sellingTokenId: BigNumberish,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastItemSwap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    loan(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrate(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrator(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintTokens(overrides?: CallOverrides): Promise<BigNumber>;

    msp(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "offer(uint24,uint24,uint16)"(
      buyingTokenId: BigNumberish,
      sellingTokenId: BigNumberish,
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "offer(uint24,uint24,uint16,uint96,uint96)"(
      buyingTokenId: BigNumberish,
      sellingTokenId: BigNumberish,
      itemId: BigNumberish,
      offerValue1: BigNumberish,
      offerValue2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "offer(uint24)"(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    offers(
      tokenId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    premintTokens(overrides?: CallOverrides): Promise<BigNumber>;

    proof(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    proofOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proto(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      tokenIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rotate(
      tokenId: BigNumberish,
      index0s: BigNumberish[],
      index1s: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sell(uint24,uint96)"(
      tokenId: BigNumberish,
      floor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "sell(uint24,uint16,uint96)"(
      sellingTokenId: BigNumberish,
      itemId: BigNumberish,
      floor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      arg0: string,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setIsTrusted(
      user: string,
      trusted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMigrator(
      _migrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shares(overrides?: CallOverrides): Promise<BigNumber>;

    stake(overrides?: CallOverrides): Promise<BigNumber>;

    staked(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trustedMint(
      tokenId: BigNumberish,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trustedMintTokens(overrides?: CallOverrides): Promise<BigNumber>;

    vfl(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vfo(uint24,uint24,uint16)"(
      buyer: BigNumberish,
      seller: BigNumberish,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vfo(address,uint24)"(
      sender: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vfr(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xnuggftv1(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    REBALANCE_FEE_BPS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    agency(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      you: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bye(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "check(address,uint24)"(
      sender: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "check(uint24,uint24,uint16)"(
      buyer: BigNumberish,
      seller: BigNumberish,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      tokenIds: BigNumberish[],
      accounts: string[],
      buyingTokenIds: BigNumberish[],
      itemIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    debt(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dotnuggv1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    early(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eps(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    floop(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genesis(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    image123(
      tokenId: BigNumberish,
      base64: boolean,
      chunk: BigNumberish,
      prev: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    imageSVG(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    imageURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrusted(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemAgency(
      sellingTokenId: BigNumberish,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    itemOffers(
      buyingTokenid: BigNumberish,
      sellingTokenId: BigNumberish,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastItemSwap(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    loan(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrate(
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    msp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "offer(uint24,uint24,uint16)"(
      buyingTokenId: BigNumberish,
      sellingTokenId: BigNumberish,
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "offer(uint24,uint24,uint16,uint96,uint96)"(
      buyingTokenId: BigNumberish,
      sellingTokenId: BigNumberish,
      itemId: BigNumberish,
      offerValue1: BigNumberish,
      offerValue2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "offer(uint24)"(
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    offers(
      tokenId: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    premintTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proof(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proofOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proto(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(
      tokenIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rotate(
      tokenId: BigNumberish,
      index0s: BigNumberish[],
      index1s: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sell(uint24,uint96)"(
      tokenId: BigNumberish,
      floor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "sell(uint24,uint16,uint96)"(
      sellingTokenId: BigNumberish,
      itemId: BigNumberish,
      floor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      arg0: string,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setIsTrusted(
      user: string,
      trusted: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMigrator(
      _migrator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shares(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    staked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trustedMint(
      tokenId: BigNumberish,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trustedMintTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vfl(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vfo(uint24,uint24,uint16)"(
      buyer: BigNumberish,
      seller: BigNumberish,
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vfo(address,uint24)"(
      sender: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vfr(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xnuggftv1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
