/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface DotnuggV1Interface extends utils.Interface {
  contractName: "DotnuggV1";
  functions: {
    "calc(uint256[][])": FunctionFragment;
    "combo(uint256[],bool)": FunctionFragment;
    "svg(uint256[],bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calc",
    values: [BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "combo",
    values: [BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "svg",
    values: [BigNumberish[], boolean]
  ): string;

  decodeFunctionResult(functionFragment: "calc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "combo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "svg", data: BytesLike): Result;

  events: {};
}

export interface DotnuggV1 extends BaseContract {
  contractName: "DotnuggV1";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DotnuggV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "calc(uint256[][])"(
      reads: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { calculated: BigNumber[] }>;

    "calc(uint256[])"(
      read: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { calculated: BigNumber[] }>;

    "combo(uint256[],bool)"(
      read: BigNumberish[],
      base64: boolean,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    "combo(uint256[][],bool)"(
      reads: BigNumberish[][],
      base64: boolean,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    svg(
      calculated: BigNumberish[],
      base64: boolean,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;
  };

  "calc(uint256[][])"(
    reads: BigNumberish[][],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "calc(uint256[])"(
    read: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "combo(uint256[],bool)"(
    read: BigNumberish[],
    base64: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  "combo(uint256[][],bool)"(
    reads: BigNumberish[][],
    base64: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  svg(
    calculated: BigNumberish[],
    base64: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    "calc(uint256[][])"(
      reads: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "calc(uint256[])"(
      read: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "combo(uint256[],bool)"(
      read: BigNumberish[],
      base64: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "combo(uint256[][],bool)"(
      reads: BigNumberish[][],
      base64: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    svg(
      calculated: BigNumberish[],
      base64: boolean,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    "calc(uint256[][])"(
      reads: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calc(uint256[])"(
      read: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "combo(uint256[],bool)"(
      read: BigNumberish[],
      base64: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "combo(uint256[][],bool)"(
      reads: BigNumberish[][],
      base64: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    svg(
      calculated: BigNumberish[],
      base64: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "calc(uint256[][])"(
      reads: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calc(uint256[])"(
      read: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "combo(uint256[],bool)"(
      read: BigNumberish[],
      base64: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "combo(uint256[][],bool)"(
      reads: BigNumberish[][],
      base64: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    svg(
      calculated: BigNumberish[],
      base64: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
